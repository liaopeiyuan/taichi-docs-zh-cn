# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, Taichi Developers
# This file is distributed under the same license as the taichi package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: taichi 0.6.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-06-14 12:50+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../offset.rst:4
msgid "Coordinate offsets"
msgstr ""

#: ../../offset.rst:6
msgid ""
"A Taichi tensor can be defined with **coordinate offsets**. The offsets "
"will move tensor bounds so that tensor origins are no longer zero "
"vectors. A typical use case is to support voxels with negative "
"coordinates in physical simulations."
msgstr ""

#: ../../offset.rst:7
msgid ""
"For example, a matrix of ``32x64`` elements with coordinate offset "
"``(-16, 8)`` can be defined as the following:"
msgstr ""

#: ../../offset.rst:9
msgid "a = ti.Matrix(2, 2, dt=ti.f32, shape=(32, 64), offset=(-16, 8))"
msgstr ""

#: ../../offset.rst:13
msgid ""
"In this way, the tensor's indices are from ``(-16, 8)`` to ``(16, 72)`` "
"(exclusive)."
msgstr ""

#: ../../offset.rst:15
msgid ""
"a[-16, 32]  # lower left corner\n"
"a[16, 32]   # lower right corner\n"
"a[-16, 64]  # upper left corner\n"
"a[16, 64]   # upper right corner"
msgstr ""

#: ../../offset.rst:22
msgid ""
"The dimensionality of tensor shapes should **be consistent** with that of"
" the offset. Otherwise, a ``ValueError`` will be raised."
msgstr ""

#: ../../offset.rst:24
msgid ""
"a = ti.Matrix(2, 3, dt=ti.f32, shape=(32,), offset=(-16, ))          # "
"Works!\n"
"b = ti.Vector(3, dt=ti.f32, shape=(16, 32, 64), offset=(7, 3, -4))   # "
"Works!\n"
"c = ti.Matrix(2, 1, dt=ti.f32, shape=None, offset=(32,))             # "
"AssertionError\n"
"d = ti.Matrix(3, 2, dt=ti.f32, shape=(32, 32), offset=(-16, ))       # "
"AssertionError\n"
"e = ti.var(dt=ti.i32, shape=16, offset=-16)                          # "
"Works!\n"
"f = ti.var(dt=ti.i32, shape=None, offset=-16)                        # "
"AssertionError\n"
"g = ti.var(dt=ti.i32, shape=(16, 32), offset=-16)                    # "
"AssertionError"
msgstr ""

